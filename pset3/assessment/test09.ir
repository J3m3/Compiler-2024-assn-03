:Godel.code := None
:Godel.prime := None

func :Util.exp(m, n) {
	t0 <- 1
	r <- t0
L0:
	t1 <- 0
	t2 <- n > t1
	branch t2 L1 L2
L1:
	t3 <- r * m
	r <- t3
	t4 <- 1
	t5 <- n - t4
	n <- t5
	jump L0
L2:
	return r
}

func :Util.isqrt(n) {
	t0 <- 0
	r <- t0
L0:
	t1 <- 1
	t2 <- r + t1
	t3 <- 1
	t4 <- r + t3
	t5 <- t2 * t4
	t6 <- t5 <= n
	branch t6 L1 L2
L1:
	t7 <- 1
	t8 <- r + t7
	r <- t8
	jump L0
L2:
	return r
}

func :Util.is_prime(n) {
	t0 <- 1
	t1 <- n <= t0
	branch t1 L0 L1
L0:
	t2 <- 0
	return t2
	jump L2
L1:
	jump L2
L2:
	r <- call :Util.isqrt(n)
	t3 <- 2
	i <- t3
L3:
	t4 <- i <= r
	branch t4 L4 L5
L4:
	t5 <- n % i
	t6 <- 0
	t7 <- t5 == t6
	branch t7 L6 L7
L6:
	t8 <- 0
	return t8
	jump L8
L7:
	t9 <- 1
	t10 <- i + t9
	i <- t10
	jump L8
L8:
	jump L3
L5:
	t11 <- 1
	return t11
}

func :Util.next_prime(n) {
	t0 <- 0
	p <- t0
L0:
	t1 <- 0
	t2 <- p == t1
	branch t2 L1 L2
L1:
	t3 <- 1
	t4 <- n + t3
	n <- t4
	p <- call :Util.is_prime(n)
	jump L0
L2:
	return n
}

func :Godel.init_put() {
	t0 <- 1
	:Godel.code <- t0
	t1 <- 2
	:Godel.prime <- t1
}

func :Godel.put(x) {
	t <- call :Util.exp(:Godel.prime, x)
	t0 <- :Godel.code * t
	:Godel.code <- t0
	:Godel.prime <- call :Util.next_prime(:Godel.prime)
	return :Godel.code
}

func :Godel.init_get() {
	t0 <- 2
	:Godel.prime <- t0
}

func :Godel.get() {
	t0 <- 0
	x <- t0
L0:
	t1 <- :Godel.code % :Godel.prime
	t2 <- 0
	t3 <- t1 == t2
	branch t3 L1 L2
L1:
	t4 <- :Godel.code / :Godel.prime
	:Godel.code <- t4
	t5 <- 1
	t6 <- x + t5
	x <- t6
	jump L0
L2:
	:Godel.prime <- call :Util.next_prime(:Godel.prime)
	return x
}

func :main() {
	_ <- call :Godel.init_put()
	t0 <- 1
	x <- t0
L0:
	t1 <- 0
	t2 <- x > t1
	branch t2 L1 L2
L1:
	x <- read
	t3 <- 0
	t4 <- x > t3
	branch t4 L3 L4
L3:
	r <- call :Godel.put(x)
	jump L5
L4:
	jump L5
L5:
	jump L0
L2:
	print :Godel.code
	_ <- call :Godel.init_get()
	t5 <- 1
	x <- t5
L6:
	t6 <- 0
	t7 <- x > t6
	branch t7 L7 L8
L7:
	x <- call :Godel.get()
	t8 <- 0
	t9 <- x > t8
	branch t9 L9 L10
L9:
	print x
	jump L11
L10:
	jump L11
L11:
	jump L6
L8:
}
